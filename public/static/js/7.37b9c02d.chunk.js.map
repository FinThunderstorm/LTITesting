{"version":3,"sources":["client/utils/storage.js","client/utils/mockUserService.js","client/utils/loginAsService.js","client/utils/apiClient.js","client/hooks/useMessages.js","client/hooks/useCreateMessage.js","client/components/Messages.js"],"names":["storage","store","namespace","FALLBACK_USER","username","firstName","lastName","email","MockUserService","fallbackUser","this","get","getUser","uid","givenname","sn","mail","user","set","window","location","reload","mockUserService","__mockUser__","loginAsService","remove","getUsername","__loginAs__","apiClient","axios","create","baseURL","BASE_PATH","interceptors","request","use","config","headers","IN_PRODUCTION","getHeaders","useMessages","options","queryKey","queryFn","a","data","useQuery","messages","rest","useCreateMessage","mutationFn","message","post","mutation","useMutation","Messages","useState","newMessage","setNewMessage","isLoading","refetch","mutateAsync","isSending","PageProgress","handleSend","event","preventDefault","console","error","Typography","component","variant","mb","Paper","Box","p","onSubmit","disabled","TextField","label","value","onChange","target","InputProps","endAdornment","InputAdornment","position","IconButton","type","color","fullWidth","required","length","align","List","map","index","ListItem","divider","ListItemText","primary","body","id"],"mappings":"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","file":"static/js/7.37b9c02d.chunk.js","sourcesContent":["import store from 'store2'\n\nconst storage = store.namespace('toskaboiler')\n\nexport default storage\n","import storage from './storage'\n\nconst FALLBACK_USER = {\n  username: 'mluukkai',\n  firstName: 'Matti',\n  lastName: 'Luukkainen',\n  email: 'matti.luukkainen@helsinki.fi',\n}\n\nexport class MockUserService {\n  constructor({ fallbackUser = FALLBACK_USER } = {}) {\n    this.fallbackUser = fallbackUser\n  }\n\n  getUser() {\n    return storage.get('mockUser') ?? this.fallbackUser\n  }\n\n  getHeaders() {\n    const { username, firstName, lastName, email } = this.getUser()\n\n    return {\n      uid: username,\n      givenname: firstName,\n      sn: lastName,\n      mail: email,\n    }\n  }\n\n  setUser(user) {\n    storage.set('mockUser', user)\n\n    window.location.reload()\n  }\n}\n\nconst mockUserService = new MockUserService()\n\n// eslint-disable-next-line no-underscore-dangle\nwindow.__mockUser__ = mockUserService\n\nexport default mockUserService\n","import storage from './storage'\n\nexport class LoginAsService {\n  login(username) {\n    storage.set('adminLoggedInAs', username)\n\n    window.location.reload()\n  }\n\n  clear() {\n    storage.remove('adminLoggedInAs')\n\n    window.location.reload()\n  }\n\n  getUsername() {\n    return storage.get('adminLoggedInAs')\n  }\n\n  getHeaders() {\n    const username = this.getUsername()\n\n    return username ? { 'x-admin-logged-in-as': username } : {}\n  }\n}\n\nconst loginAsService = new LoginAsService()\n\n// eslint-disable-next-line no-underscore-dangle\nwindow.__loginAs__ = loginAsService\n\nexport default loginAsService\n","import axios from 'axios'\nimport { BASE_PATH, IN_PRODUCTION } from '../config'\nimport mockUserService from './mockUserService'\nimport loginAsService from './loginAsService'\n\nconst getUserHeaders = () => (IN_PRODUCTION ? {} : mockUserService.getHeaders())\n\nconst getLoggedInAsHeaders = () => loginAsService.getHeaders()\n\nconst apiClient = axios.create({ baseURL: `${BASE_PATH}/api` })\n\n// Remove this if not used behind shibboleth\napiClient.interceptors.request.use((config) => {\n  const headers = {\n    ...config.headers,\n    ...getUserHeaders(),\n    ...getLoggedInAsHeaders(),\n  }\n\n  const newConfig = { ...config, headers }\n\n  return newConfig\n})\n\nexport default apiClient\n","import { useQuery } from 'react-query'\nimport apiClient from '../utils/apiClient'\n\nconst useMessages = (options = {}) => {\n  const queryKey = 'messages'\n\n  const queryFn = async () => {\n    const { data } = await apiClient.get('/messages')\n\n    return data\n  }\n\n  const { data: messages, ...rest } = useQuery(queryKey, queryFn, options)\n\n  return { messages, ...rest }\n}\n\nexport default useMessages\n","import { useMutation } from 'react-query'\n\nimport apiClient from '../utils/apiClient'\n\nconst useCreateMessage = (options = {}) => {\n  const mutationFn = async (message) => {\n    const { data } = await apiClient.post('/messages', message)\n\n    return data\n  }\n\n  const mutation = useMutation(mutationFn, options)\n\n  return mutation\n}\n\nexport default useCreateMessage\n","import React, { useState } from 'react'\n\nimport {\n  Typography,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  TextField,\n  Box,\n  InputAdornment,\n  IconButton,\n} from '@mui/material'\n\nimport SendIcon from '@mui/icons-material/Send'\n\nimport useMessages from '../hooks/useMessages'\nimport useCreateMessage from '../hooks/useCreateMessage'\nimport PageProgress from './PageProgress'\n\nconst Messages = () => {\n  const [newMessage, setNewMessage] = useState('')\n  const { messages, isLoading, refetch } = useMessages()\n  const { mutateAsync, isLoading: isSending } = useCreateMessage()\n\n  if (isLoading) {\n    return <PageProgress />\n  }\n\n  const handleSend = async (event) => {\n    event.preventDefault()\n\n    try {\n      await mutateAsync({ message: newMessage })\n      setNewMessage('')\n      refetch()\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(error)\n    }\n  }\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h4\" mb={2}>\n        Messages\n      </Typography>\n\n      <Paper>\n        <Box p={2}>\n          <form onSubmit={handleSend} disabled={isSending}>\n            <TextField\n              label=\"Message\"\n              value={newMessage}\n              disabled={isSending}\n              onChange={(event) => setNewMessage(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      type=\"submit\"\n                      color=\"primary\"\n                      disabled={isSending}\n                    >\n                      <SendIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              fullWidth\n              required\n            />\n          </form>\n        </Box>\n        {messages.length === 0 && (\n          <Typography color=\"textSecondary\" align=\"center\">\n            No messages yet. Send a message!\n          </Typography>\n        )}\n        <List>\n          {messages.map((message, index) => (\n            <ListItem key={message.id} divider={index < messages.length - 1}>\n              <ListItemText primary={message.body} />\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n    </>\n  )\n}\n\nexport default Messages\n"],"sourceRoot":""}